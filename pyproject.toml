[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vampnet-onnx"
version = "0.1.0"
description = "ONNX export and optimization toolkit for VampNet music generation models"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Stephen Wolff", email = "github@maxgatedigital.com"},
]
keywords = ["vampnet", "onnx", "music-generation", "ai", "audio", "deep-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "torch>=2.0.0",
    "numpy>=1.21.0",
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
    "scipy>=1.7.0",
    "librosa>=0.9.0",
    "soundfile>=0.10.0",
    "tqdm>=4.62.0",
    "resampy>=0.3.1",
    "vampnet @ git+https://github.com/stephendwolff/vampnet.git",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "jupyter>=1.0.0",
    "matplotlib>=3.5.0",
]
optimization = [
    "onnxruntime-tools>=1.7.0",
    "pillow>=8.3.0",
]
deployment = [
    "coremltools>=6.0",
    "tensorflow>=2.9.0",
    "onnx-tf>=1.10.0",
]

[project.urls]
Homepage = "https://github.com/stephendwolff/vampnet-onnx-export"
Documentation = "https://github.com/stephendwolff/vampnet-onnx-export#readme"
Repository = "https://github.com/stephendwolff/vampnet-onnx-export"
Issues = "https://github.com/stephendwolff/vampnet-onnx-export/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["vampnet_onnx*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"